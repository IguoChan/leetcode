/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
    retListNode := &ListNode{}
    next := retListNode
    pre := &ListNode{}
    carry := 0
    for l1 != nil && l2 != nil {
        pre = next
        val := l1.Val + l2.Val + carry
        if val >= 10 {
            carry = 1
            val -= 10
        } else {
            carry = 0
        }
        pre.Val = val
        next = &ListNode{}
        pre.Next = next
        l1 = l1.Next
        l2 = l2.Next
    }
    // 说明l2结束了，但是l1还剩元素
    for l1 != nil {
        pre = next
        val := l1.Val + carry
        if val >= 10 {
            carry = 1
            val -= 10
        } else {
            carry = 0
        }
        pre.Val = val
        next = &ListNode{}
        pre.Next = next
        l1 = l1.Next
    }
    // 说明l1结束了，但是l2还剩元素
    for l2 != nil {
        pre = next
        val := l2.Val + carry
        if val >= 10 {
            carry = 1
            val -= 10
        } else {
            carry = 0
        }
        pre.Val = val
        next = &ListNode{}
        pre.Next = next
        l2 = l2.Next
    }
    if carry == 1 {
        pre.Next.Val = 1
    } else {
        pre.Next = nil
    }
    return retListNode
}
//runtime:4 ms
//memory:4.7 MB
